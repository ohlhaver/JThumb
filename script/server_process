#!/usr/bin/env ruby

require 'rubygems'
require 'eventmachine'
require 'evma_httpserver'
require 'uri'
require 'yaml'
require "#{File.dirname(__FILE__)}/../j_thumb"

################################################
# Sample Client
#  require 'net/http'
#  require 'uri'
#
#  Net::HTTP.post_form(URI.parse('http://localhost:8080/'),{:action => "add", :id => 506, :data => "imagedata"})
#  Net::HTTP.post_form(URI.parse('http://localhost:8080/'),{:action => "delete", :id => 506})
################################################


class Data
  def self.parse(data)
    params = {}
    data.split('&').each do |s|
      name,value = s.split('=')
      name  = URI.decode(name)
      value = URI.decode(value)
      params[name.to_sym] = value
    end
    return params
  end
  def self.valid?(params)
    return false if params[:action].nil? or params[:action].empty?
    if params[:action] == 'add'
      return false if params[:id].nil? or params[:id].empty? or params[:id].to_i <= 0
      return false if params[:data].nil? or params[:data].empty?
      return true
    end
    
    if params[:action] == 'delete'
      return !(params[:id].nil? or params[:id].empty? or params[:id].to_i <= 0)
    end
    return false
  end
end
class ThumbnailManager < EventMachine::Connection
  include EventMachine::HttpServer

  def process_http_request
    resp = EventMachine::DelegatedHttpResponse.new( self )
    operation = proc do 
      params = Data.parse(@http_post_content) 
      puts "Params:\n#{params.inspect}"
      if Data.valid?(params)
        path = nil
        if params[:action] == 'add'
          path = JThumb::Storage.add(params[:id],params[:data])
        elsif params[:action] == 'delete'
          path = JThumb::Storage.delete(params[:id])
        end
        if path
          resp.status  = 200
          resp.content = path
        else
          resp.status = 400
        end
      else
          resp.status = 400
      end
    end
    callback = proc do |res|
      resp.send_response
    end
    EM.defer(operation,callback)
  end
end

EM.run{
  SERVER_CONFIG = YAML.load_file(File.join(File.dirname(__FILE__), '../config/server.yml'))
  EventMachine.epoll
  EM.start_server SERVER_CONFIG['host'], SERVER_CONFIG['port'], ThumbnailManager
  puts "Started #{SERVER_CONFIG['host']}:#{SERVER_CONFIG['port']}"
}
